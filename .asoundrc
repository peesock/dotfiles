# pcm.!default { # uses ALSAPCM env var to optionally set different alsa devices. for eg, run `ALSAPCM=voicechat firefox` to (hopefully) allow mic usage by default in browser.
# 	type plug
# 		slave.pcm {
# 			@func getenv
# 				vars [ ALSAPCM ]
# 				default "desktop"
# 		}
# }

pcm.desktop { # asym device, sets up capture and playback into one package
	type asym
		playback.pcm "plug:globalrouter"
		capture.pcm "desktopsnooper"
		hint {
			show on
				description "for loopback playback and capture."
		}
}
pcm.voicechat {
	type asym
		playback.pcm "plug:globalrouter"
		capture.pcm "micsnooper"
		hint {
			show on
				description "for loopback playback and mic capture."
		}
}
pcm.everything {
	type asym
		playback.pcm "globalrouter"
		capture.pcm "capturemulti"
}
ctl.everything {
	type hw
		card PCH
}

pcm.capturemulti {
	type multi
	slaves.a.pcm "desktopsnooper"
	slaves.a.channels 2
	slaves.b.pcm "micsnooper"
	slaves.b.channels 2
	bindings.0 { slave a; channel 0; }
	bindings.1 { slave a; channel 1; }
	bindings.2 { slave b; channel 0; }
	bindings.3 { slave b; channel 1; }
}

# duplicate audio between the 2 sets of 2 channels in globalquader
pcm.globalrouter {
	type plug
	route_policy "duplicate" # this is very clamplicated
	slave.pcm "globalquader"
}
pcm.globalquader { # creates a multi device called globalquader that has 4 channels instead of 2. the first 2 channels use desktop audio (loopback in my case), and the other two use the speaker (hw:PCH in my case).
	type multi
	master 1 # set slave b as the master child, meaning all clock timing and other sound shenanigans are based on that instead of the fake loopback device.
	slaves.a.pcm "desktopmixer"
	slaves.a.channels 2
# slaves.b.pcm "globalfifo"
	slaves.b.pcm "globalsoftvol"
	slaves.b.channels 2
	bindings.0 { slave a; channel 0; }
	bindings.1 { slave a; channel 1; }
	bindings.2 { slave b; channel 0; }
	bindings.3 { slave b; channel 1; }
}

pcm.globalsoftvol { # softvol lets you add a software volume control to anything. maximum loudness is always dependent on hardware volume.
	type softvol
		slave {
			pcm globalmute
		}
	control {
		name "Global"
			card Loopback
	}
}

pcm.globalmute { # since softvol alone doesn't support it somehow
	type softvol
		slave {
			pcm speakermixer
		}
	control {
		name "GlobalMute"
			card Loopback
	}
	resolution 2
}

pcm.speakermixer { # dmixer for my sound card, hw:PCH. does the same as desktopmixer, but affects the hardware sound output.
	type dmix
		ipc_key 1112
		slave {
			pcm "hw:PCH,0"
				rate 48000
				format S16_LE
				channels 2
				period_size 512
				periods 4
		}
}

# hw:Loopback,[0 = capture, 1 = playback],[subdevice 0-7]
pcm.desktopmixer { # dmixer for the loopback device. essentially mixes all playback streams going into the loopback together into this sub-device.
	type dmix
		ipc_key 1111
		slave {
			pcm "hw:Loopback,0,0"
				rate 48000
				format S16_LE
				channels 2
				period_size 512
				periods 4
		}
}

pcm.desktopsnooper { # dnsooper for the loopback. similar to dmixer, it allows multiple clients to capture sound from the same card input (microphone), so you can record your voice while calling your friends.
	type dsnoop
		ipc_key 2222
		slave {
			pcm "hw:Loopback,1,0"
				rate 48000
				format S16_LE
				channels 2
				period_size 512
				periods 4
		}
}

# web mic setup, uses dsnoop
pcm.micsnooper{
	type dsnoop
		ipc_key 2223
		slave {
			pcm "hw:BRIO"
				rate 48000
				format S16_LE
				channels 1
				period_size 512
				periods 4
		}
}

pcm.mpd {
	type asym
		playback.pcm "plug:mpdrouter"
		capture.pcm "mpdsnooper"
		hint {
			show on
				description "for playing from and recording MPD."
		}
}
pcm.mpdrouter {
	type plug
	route_policy "duplicate"
		slave.pcm "mpdquader"
}
pcm.mpdquader {
	type multi
		master 1
		slaves.a.pcm "mpdmixer"
		slaves.a.channels 2
		slaves.b.pcm "mpdsoftvol"
		slaves.b.channels 2
		bindings.0 { slave a; channel 0; }
		bindings.1 { slave a; channel 1; }
		bindings.2 { slave b; channel 0; }
		bindings.3 { slave b; channel 1; }
}

pcm.mpdsoftvol {
	type softvol
		slave {
			pcm speakermixer
		}
	control {
		name "MPD"
			card Loopback
	}
}

pcm.mpdmixer {
	type plug
	slave.pcm {
		type dmix
		ipc_key 1113
		slave {
			pcm "hw:Loopback,0,1"
				rate 48000
				format S16_LE
				channels 2
				period_size 512
				periods 4
		}
	}
}
pcm.mpdsnooper {
	type dsnoop 
		ipc_key 2224
		slave {
			pcm "hw:Loopback,1,1"
				format S16_LE
				channels 2
				period_size 512
				periods 4
		}
}

pcm.jack {
	type jack
		playback_ports {
			0 system:playback_1
				1 system:playback_2
		}
	capture_ports {
		0 system:capture_1
			1 system:capture_2
	}
}

ctl.mixer0 {
	type hw
		card 0
}
