#!/bin/sh

gitDir="$HOME/.dotfiles" # default
workingDir="$HOME"
programName=$(basename "$0")

eval 'help(){
	printf %s "\
usage:
'$programName' [OPTIONS] FUNCTION [ARGS]

options:
-g dir       set git directory to dir (default '\'$gitDir\'')
-w dir       set working directory to dir (default '\'$workingDir\'')

functions:
init         run git init on git dir
link         recursively hardlink all arguments to git dir (requires GNU cp)
link -R      runs link in reverse, restoring your dotfiles from git. use -f to force
add          run link and git add on all arguments
rm           recursively remove *both* existing hardlinks (and folders) of argument
mv           mv + git mv, only 2 args (i need to rewrite this stupid program in C)
run          run arguments as if you were in the git repo (if outside, defaults to top)
g            runs git with modified options and file paths to change the dot repo
help         helps
dotpath      returns either the git (default) or working (-R) path of specified argument
"
}
'

unset reverse restore exist

dotpath()(
	[ "$1" = "-d" ] && default=true && shift
	[ "$1" = "-R" ] && reverse=true && shift
	[ "$1" = '--' ] && shift
	for file in "$@"; do
		file=$(realpath -m -- "$file") # calling this once for every file sucks but so does shell
		fileWorking=${file#"$workingDir"}
		fileGit=${file#"$gitDir"}

		if [ "$file" != "$fileGit" ]; then
			# we are in the dots folder.
			[ $reverse ] &&
				out="$workingDir$fileGit" ||
					out="$gitDir$fileGit"

		elif [ "$file" != "$fileWorking" ] && [ "$file" = "$fileGit" ]; then
			# we are in the home folder.
			[ $reverse ] &&
				out="$workingDir$fileWorking" ||
					out="$gitDir$fileWorking"

		elif ! [ $default ]; then
			exit=1
			continue
		else
			exit=2
			out=$gitDir
		fi
		echo "$out"
	done
	return $exit
)

link()(
	opts=$(getopt -o 'Rf' -- "$@")
	eval set -- $opts
	while true; do
		[ "$1" = "-R" ] && restore=true && shift
		[ "$1" = "-f" ] && force=true && shift
		[ "$1" = '--' ] && shift && break
	done
	for infile in "$@"; do
		if [ $restore ]; then
			infile=$(dotpath "$infile")
			outfile=$(dotpath -R -- "$infile")
		else

			outfile=$(dotpath "$infile")
		fi
		mkdir -p "$(dirname "$outfile")"
		echo "linking '$infile' to '$outfile'" >&2
		cp -rflT $(! [ $force ] && [ $restore ] && echo '-i') "$infile" "$outfile"
	done
)

add()(
	link -- "$@"
	g add "$@"
)

rm()(
	for file in "$@"; do
		path=$(dotpath "$file")
		echo "removing '$file' and '$path'" >&2
		command rm -rI "$path" "$file"
	done
)

mv()(
	[ $# -ne 2 ] && echo 2 args pls >&2 && exit 1
	command mv -v "$1" "$2"
	g mv -v "$(dotpath "$1")" "$(dotpath "$2")"
)

argpath()(
	for arg in "$@"; do
		if [ $fileTrue ]; then
			arg=$(dotpath -- "$arg")
		else
			[ "$arg" = "--" ] && fileTrue=true && continue
			[ "${arg#"$workingDir"}" != "$arg" ] && arg=$(dotpath "$arg")
		fi
		printf '%s\0' "$arg"
	done
)

run()(
	dir=$(dotpath -d -- "$PWD")
	[ -d "$dir" ] && exist=true
	mkdir -p "$dir"
	cd "$dir" || exit
	trap '[ $exist ] || rmdir --ignore-fail-on-non-empty -p "$dir"; exit' INT
	x=$1; shift
	argpath "$@" | xargs -0 "$x"
	[ $exist ] || rmdir --ignore-fail-on-non-empty -p "$dir"
)

g()(
	run git --git-dir="$gitDir/.git" --work-tree="$gitDir" "$@"
)

init(){
	mkdir -p "$gitDir"
	git init "$gitDir"
}

while true; do
	[ "$1" = -g ] && {
		gitDir="$2"
		shift 2
		continue
	}
	[ "$1" = -w ] && {
		workingDir="$2"
		shift 2
		continue
	}
	break
done

if type "$1" | grep -iF "shell function" >/dev/null; then
	"$@"
else
	echo "Run '$programName help' for quick options or see '$0' for all functions."
	exit 1
fi
