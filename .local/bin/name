#!/bin/sh
# utils i often use for filenames

# rules: extensions can be any length, but cannot end in '.'
ext(){
	sed -zn 's/.\+\.//p'
}
base(){
	sed -z 's/\(.\+\)\..*/\1/'
}
reextend(){
	sed -z "s/\(.*\)\..*\|\$/\1.$newext/" # relies on side effect
}

# renames files like image.png to image-1.png to image-2.png.
# renaming image-2.png makes image-2-1.png instead of guessing.
rename()(
	for file; do
		[ ! -e "$file" ] && {
			printf "%s$d" "$file"
			continue
		}
	
		name=$(printf "%s" "$file" | base)
		extension=$(printf "%s" "$file" | ext)
		extension=${extension:+".$extension"}
		i=1
		while true; do
			file="${name}-$i${extension}"
			# echo "$file" >&2
			[ -e "$file" ] || break
			i=$((i + 1))
		done
		
		printf "%s$d" "$file"
	done
)

d="\n"

# eval 'set -- '$(getopt -o 'qp' -- "$@")

[ "$1" = "xargs" ] && {
	shift
	"$@"
	exit
}

while true; do
	case "$1" in
		-d)
			d=$2
			shift
			;;
		--)
			shift
			break
			;;
		*)
			fun=$1
			shift
			[ "$fun" = "reextend" ] && {
				newext=$1; shift
			}
			[ "$fun" = "rename" ] && {
				if [ $# -le 0 ]; then
					xargs -d "$d" "$0" xargs rename
				else
					rename "$@"
				fi
				exit
			}
			if [ $# -le 0 ]; then
				tr "$d" '\0' | $fun
			else
				printf "%s\0" "$@" | $fun
			fi | tr '\0' "$d"
			exit
			;;
	esac
	shift
done
