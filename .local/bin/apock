#!/bin/sh

programName=$(basename "$0")
tmpDir="/tmp/$USER/$programName/$DISPLAY"
lockFile=$tmpDir/lock
cycle=$(xset q | awk '/cycle/{print $4}')
timeout=$(xset q | awk '/cycle/{print $2}')

mkdir -p "$tmpDir"

# warn feature used with xss-lock
if [ "$1" = "warn" ]; then
	trap 'exit' TERM INT
	[ -e "$lockFile" ] || {
		while [ "$cycle" -gt 0 ]; do
			t=2000
			[ "$cycle" -eq 1 ] && t=500 # prevents dunst from displaying this when waking up
			notify-send -r 13 -t $t "Locking" "$cycle\s"
			sleep 1
			cycle=$((cycle - 1))
		done
	}
	sleep 2147483647 &
	trap "kill $!" EXIT
	wait
	exit
fi

[ -e "$lockFile" ] && {
	echo "already locked. hanging until exit"
	command -v inotifywait >/dev/null && {
		inotifywait -e delete_self "$lockFile" && exit
	}
	echo 'inotifywait failed'
	while [ -e "$lockFile" ]; do
		sleep 5
	done
	exit
}

# basic lock command
lock(){
	alock "$@"
}

pre(){
	# lock-essential functions
	find "$tmpDir" -type f -print0 | xargs -0 rm 2>/dev/null
	touch "$lockFile"
	xset s off

	# user-defined functions
	printf 'locking at:     '; date
	# kill secret services
	passwords -k -K -q 2>/dev/null &
	dunstctl set-paused true
}

post(){
	# lock-essential functions
	kill $(cat "$tmpDir"/* 2>/dev/null) 2>/dev/null
	rm "$lockFile"
	xset s "$timeout" "$cycle"

	# user-defined functions
	printf 'unlocking at:   '; date
	dunstctl set-paused false
}
trap exit TERM INT
trap post EXIT

# simple fallback always runs in case the lock cover fails
fallback(){
	sleep 3
	# external variables used here have to be imported from $pidDIR
	for f in "$tmpDir"/*PID ; do
		eval "$(basename "$f")='$(cat "$f")'"
	done
	waitpid $coverPID; [ -d "/proc/$lockPID" ] && (
		echo "Cover failed. Used fallback" >&2
		notify-send -u critical "Lock screen" "Cover failed. Used fallback" &
		kill $funcPID
		kill $lockPID
		lock
	)
} 2>/dev/null

setfull()(
	until xprop _NET_WM_STATE -id $1 | grep -F "STATE_FULLSCREEN" >/dev/null; do
		xdotool windowstate --add FULLSCREEN $1
	done
)

exec_winid(){
	# sets global vars $wid and $pid (and $tmp)
	tmp=$(mktemp)
	xwininfo -root -tree | grep '^\s*0x[0-9]\+' | grep -v '\s\+1x1+0+0\s\++0+0' | awk '{print $1}' | sort > "$tmp"
	"$@" >&2 & pid=$!
	while true; do
		for wid in $(xwininfo -root -tree | grep '^\s*0x[0-9]\+' | grep -v '\s\+1x1+0+0\s\++0+0' | awk '{print $1}' | sort | comm --nocheck-order -13 "$tmp" -); do
			xwininfo -id "$wid" | grep -qF 'Map State: IsViewable' && break 2
		done
		sleep 0.05
	done
	rm "$tmp"
}

# set up visualizer
visualizer()(
	lock -b none & lockPID=$!
	echo $lockPID > "$tmpDir/lockPID"

	# pause all non-server programs accessing the fifo
	fifoFile="/tmp/mpd.fifo"
	# pause the shells attached to visualizers (if any) to prevent shitassery
	blackParents=$(chsh -l | while read sh; do basename "$sh"; done)
	# protect these programs accessing the fifo from being paused
	whiteChildren="mpd safe_fifo"

	# create and kill pidList
	for pid in $(lsof "$fifoFile" | sed '1d' | sed 's/\S*\s*//' | cut -d' ' -f1); do
	# for pid in $(sleep 100 | sed '1d' | sed 's/\S*\s*//' | cut -d' ' -f1); do # for testing fallback
		pidName="$(ps -cp $pid -o comm="" | sed 's/^\s*//')"
		for n in $whiteChildren; do
			if [ "$n" = "$pidName" ]; then
				protect=true
				break
			else
				protect=false
			fi
		done
		$protect || pidList="$pidList $pid"
		ppid="$(ps -cp $pid -o ppid="" | sed 's/^\s*//')"
		ppidName="$(ps -cp $ppid -o comm="" | sed 's/^\s*//')"
		for n in $blackParents; do
			if [ "$ppidName" = "$n" ]; then 
				pidList="$pidList $ppid"
			fi
		done
	done
	kill -s STOP $pidList 2>/dev/null

	if command -v alacritty >/dev/null; then
		exec_winid alacritty -o 'colors.primary.background="#000000"' -o 'window.opacity=1' -e vis
	else
		exec_winid xterm -bg '#000000' -fullscreen -e env TERM=xterm-256color vis
	fi
	coverPID=$pid
	setfull "$wid"
	echo $coverPID > "$tmpDir/coverPID"

	wait "$lockPID"
	kill -s CONT $pidList 2>/dev/null
)

xscreensaver()(
	eval 'set -- '$(getopt -o 't:c' -- "$@")
	t=2m
	unset exe
	while true; do
		case "$1" in
			-t)
				t=$2
				cycle=true
				shift 2
				;;
			-c)
				cycle=true
				shift
				;;
			--)
				shift
				break
				;;
		esac
	done
	[ "$1" ] && exe=/usr/lib/xscreensaver/$1

	exec_winid lock
	lockPID=$pid
	lockWID=$wid
	echo $lockPID | tee "$tmpDir/coverPID" "$tmpDir/lockPID" >/dev/null
	export XSCREENSAVER_WINDOW="$lockWID"

	while true; do
		unset exePID
		until [ "$exe" ]; do
			exe=$(find /usr/lib/xscreensaver -maxdepth 1 -type f | grep -v "xscreensaver/xscreensaver\|webcollage\|font\|text\|phosphor\|mapscroller\|droste\|mirrorblob\|photo\|flipscreen3d\|carousel\|esper" | shuf -n1)
			file --mime-type "$exe" | grep -F executable >/dev/null || unset exe
		done
		echo displaying "'$exe'" >&2
		$exe --root & exePID=$!
		echo $! > "$tmpDir/$!"
		unset exe
		[ "$cycle" ] && {
			(sleep "$t" && kill -9 $exePID) & echo $! > "$tmpDir/$!"
		}
		waitpid "$exePID"
		[ -d "/proc/$lockPID" ] || break
	done &
	echo $! > "$tmpDir/$!"

	waitpid "$lockPID"
)

# main
pre
exe=$1
if [ "$exe" ]; then
	shift
	fallback & fallbackPID=$!
	$exe "$@" & echo $! > "$tmpDir/funcPID"
	wait $!
else
	lock
fi
