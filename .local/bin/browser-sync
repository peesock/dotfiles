#!/bin/sh
set -e

command -v rsync >/dev/null 2>&1 || { echo "Needs rsync bud"; exit 1; }

time=30m

[ "$1" = "-d" ] && {
		daemon=true && shift &&
			[ "$1" = "-e" ] && exitDown=true && shift
		trap "exit" TERM INT
		trap 'kill 0' EXIT
}

bin=$(basename "$(command -v "$1")")
[ -z "$bin" ] && {
	echo "'$1' not a valid binary" >&2
	exit 1
}

linkDir=$2
[ -h "$linkDir" ] || [ -d "$linkDir" ] || {
	echo "'$linkDir' is not a dir" >&2
	exit 1
}

staticDir="${linkDir}-static"
memDir="/dev/shm/$bin-$(basename "$linkDir")-$USER"

# make mem dir
[ ! -r "$memDir" ] && {
	mkdir -m0700 "$memDir"
}

# link mem dir to linkDir
[ "$(readlink "$linkDir")" != "$memDir" ] && {
	mv "$linkDir" "$staticDir"
	ln -s "$memDir" "$linkDir"
}

sync(){
	# notify-send syncing
	if [ -e "$linkDir/.unpacked" ]; then
		rsync -av --delete --exclude .unpacked "$linkDir/" "$staticDir"
	else
		rsync -av "$staticDir/" "$linkDir"
		touch "$linkDir/.unpacked"
	fi
}

if [ ! $daemon ]; then
	sync
else
	while true; do
		if pidof "$bin" >/dev/null; then
			# bin is up
			unset syncerPID
			{
				while true; do
					sleep "$time"
					sync
				done
			} & syncerPID=$!
			pidwait -x "$bin"
			# bin was closed
			kill $syncerPID
			wait
			sync
		else
			# bin is down
			[ "$exitDown" ] && break
			sleep 5
		fi
	done
fi

